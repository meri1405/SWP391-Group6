import React, { useState } from 'react';
import { Card, Table, Button, Modal, Form, Input, Space, DatePicker, Select, Checkbox, Divider, Typography, message } from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined, MinusCircleOutlined } from '@ant-design/icons';
import dayjs from 'dayjs';

const { Option } = Select;
const { Title } = Typography;

const genderOptions = [
    { value: 'M', label: 'Nam' },
    { value: 'F', label: 'N·ªØ' },
    { value: 'O', label: 'Kh√°c' },
];

const birthPlaceOptions = [
    "Th√†nh ph·ªë H√† N·ªôi",
    "Th√†nh ph·ªë Hu·∫ø",
    "T·ªânh Lai Ch√¢u",
    "T·ªânh ƒêi·ªán Bi√™n",
    "T·ªânh S∆°n La",
    "T·ªânh L·∫°ng S∆°n",
    "T·ªânh Qu·∫£ng Ninh",
    "T·ªânh Thanh Ho√°",
    "T·ªânh Ngh·ªá An",
    "T·ªânh H√† Tƒ©nh",
    "T·ªânh Cao B·∫±ng",
    "T·ªânh Tuy√™n Quang",
    "T·ªânh L√†o Cai",
    "T·ªânh Th√°i Nguy√™n",
    "T·ªânh Ph√∫ Th·ªç",
    "T·ªânh B·∫Øc Ninh",
    "T·ªânh H∆∞ng Y√™n",
    "Th√†nh ph·ªë H·∫£i Ph√≤ng",
    "T·ªânh Ninh B√¨nh",
    "T·ªânh Qu·∫£ng Tr·ªã",
    "Th√†nh ph·ªë ƒê√† N·∫µng",
    "T·ªânh Qu·∫£ng Ng√£i",
    "T·ªânh Gia Lai",
    "T·ªânh Kh√°nh Ho√†",
    "T·ªânh L√¢m ƒê·ªìng",
    "T·ªânh ƒê·∫Øk L·∫Øk",
    "Th√†nh ph·ªë H·ªì Ch√≠ Minh",
    "T·ªânh ƒê·ªìng Nai",
    "T·ªânh T√¢y Ninh",
    "Th√†nh ph·ªë C·∫ßn Th∆°",
    "T·ªânh Vƒ©nh Long",
    "T·ªânh ƒê·ªìng Th√°p",
    "T·ªânh C√† Mau",
    "T·ªânh An Giang"
];

// Vietnamese alphabet regex (upper/lower, spaces)
const vietnameseNameRegex = /^[a-zA-ZƒÇƒÉ√Ç√¢ƒêƒë√ä√™√î√¥∆†∆°∆Ø∆∞√Å√°√Ä√†·∫¢·∫£√É√£·∫†·∫°ƒÇƒÉ·∫Æ·∫Ø·∫∞·∫±·∫≤·∫≥·∫¥·∫µ·∫∂·∫∑√Ç√¢·∫§·∫•·∫¶·∫ß·∫®·∫©·∫™·∫´·∫¨·∫≠√â√©√à√®·∫∫·∫ª·∫º·∫Ω·∫∏·∫π√ä√™·∫æ·∫ø·ªÄ·ªÅ·ªÇ·ªÉ·ªÑ·ªÖ·ªÜ·ªá√ç√≠√å√¨·ªà·ªâƒ®ƒ©·ªä·ªã√ì√≥√í√≤·ªé·ªè√ï√µ·ªå·ªç√î√¥·ªê·ªë·ªí·ªì·ªî·ªï·ªñ·ªó·ªò·ªô∆†∆°·ªö·ªõ·ªú·ªù·ªû·ªü·ª†·ª°·ª¢·ª£√ö√∫√ô√π·ª¶·ªß≈®≈©·ª§·ª•∆Ø∆∞·ª®·ª©·ª™·ª´·ª¨·ª≠·ªÆ·ªØ·ª∞·ª±√ù√Ω·ª≤·ª≥·ª∂·ª∑·ª∏·ªπ·ª¥·ªµ\s]+$/;

const StudentsSection = () => {
    const [showAddModal, setShowAddModal] = useState(false);
    const [showEditModal, setShowEditModal] = useState(false);
    const [editingStudent, setEditingStudent] = useState(null);
    const [form] = Form.useForm();
    const [editForm] = Form.useForm();
    const [students, setStudents] = useState([
        { id: 1, name: 'Nguy·ªÖn VƒÉn A', email: 'a@student.edu.vn', enrollmentDate: '2023-09-01' },
        { id: 2, name: 'Tr·∫ßn Th·ªã B', email: 'b@student.edu.vn', enrollmentDate: '2022-08-15' },
        { id: 3, name: 'L√™ VƒÉn C', email: 'c@student.edu.vn', enrollmentDate: '2021-07-10' },
    ]);

    const columns = [
        { title: 'T√™n', dataIndex: 'name', key: 'name' },
        { title: 'Email', dataIndex: 'email', key: 'email' },
        { title: 'Ng√†y nh·∫≠p h·ªçc', dataIndex: 'enrollmentDate', key: 'enrollmentDate' },
        {
            title: 'Thao t√°c',
            key: 'actions',
            render: (_, record) => (
                <Space size="middle">
                    <Button type="primary" icon={<EditOutlined />} size="small" onClick={() => handleEdit(record)}>S·ª≠a</Button>
                    <Button danger icon={<DeleteOutlined />} size="small">X√≥a</Button>
                </Space>
            ),
        },
    ];

    const handleAdd = (values) => {
        // For demo, just close modal and reset
        setShowAddModal(false);
        form.resetFields();
        message.success('ƒê√£ th√™m h·ªçc sinh v√† ph·ª• huynh (gi·∫£ l·∫≠p)');
    };

    const handleEdit = (student) => {
        setEditingStudent(student);
        editForm.setFieldsValue({
            name: student.name,
            email: student.email,
            enrollmentDate: student.enrollmentDate,
        });
        setShowEditModal(true);
    };

    const handleEditSave = (values) => {
        setStudents((prev) => prev.map((s) => s.id === editingStudent.id ? { ...s, ...values } : s));
        setShowEditModal(false);
        setEditingStudent(null);
        message.success('C·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh th√†nh c√¥ng');
    };

    return (
        <div className="dashboard-section">
            <div className="section-header">
                <h2 style={{ fontSize: 24, fontWeight: 600, color: '#333', margin: 0 }}>H·ªçc sinh</h2>
                <Button
                    type="primary"
                    icon={<PlusOutlined />}
                    onClick={() => {
                        form.resetFields();
                        setShowAddModal(true);
                    }}
                    style={{ background: '#ff6b35', borderColor: '#ff6b35', borderRadius: 6, fontWeight: 500 }}
                >
                    Th√™m h·ªçc sinh
                </Button>
            </div>
            <Card style={{ borderRadius: 12, boxShadow: '0 4px 20px rgba(0,0,0,0.08)', marginBottom: 24 }} bodyStyle={{ padding: 24 }}>
                <Table
                    columns={columns}
                    dataSource={students}
                    rowKey="id"
                    pagination={{ pageSize: 10 }}
                    style={{ borderRadius: 8, overflow: 'hidden' }}
                />
            </Card>
            <Modal
                title={'Th√™m h·ªçc sinh v√† ph·ª• huynh'}
                open={showAddModal}
                onCancel={() => {
                    setShowAddModal(false);
                    form.resetFields();
                }}
                footer={null}
                width={900}
            >
                {/* Guide Section */}
                <Card style={{ marginBottom: 24, background: '#f6f8fa', borderLeft: '4px solid #ff6b35' }}>
                    <div style={{ fontWeight: 500, color: '#ff6b35', marginBottom: 8 }}>üìã H∆∞·ªõng d·∫´n nh·∫≠p th√¥ng tin</div>
                    <ul style={{ margin: 0, paddingLeft: 20, color: '#333', fontSize: 14 }}>
                        <li>H·ªç v√† t√™n: 2-50 k√Ω t·ª±, ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát.</li>
                        <li>S·ªë ƒëi·ªán tho·∫°i: 10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 03, 05, 07, 08, 09.</li>
                        <li>Ng√†y sinh ph·ª• huynh: Tu·ªïi t·ª´ 18-100.</li>
                        <li>Ng√†y sinh h·ªçc sinh: T·ª´ 6 ƒë·∫øn 12 tu·ªïi.</li>
                        <li>ƒê·ªãa ch·ªâ: 10-200 k√Ω t·ª±.</li>
                        <li>N∆°i sinh: Ch·ªçn t·ª´ danh s√°ch t·ªânh/th√†nh ph·ªë.</li>
                        <li>C√≥ th·ªÉ th√™m t·ªëi ƒëa 2 ph·ª• huynh v√† 5 h·ªçc sinh.</li>
                    </ul>
                </Card>
                <Form
                    form={form}
                    layout="vertical"
                    onFinish={handleAdd}
                    autoComplete="off"
                >
                    <Form.List name="parents" initialValue={[{}]} rules={[{ validator: async (_, parents) => { if (!parents || parents.length < 1) throw new Error('√çt nh·∫•t 1 ph·ª• huynh'); if (parents.length > 2) throw new Error('T·ªëi ƒëa 2 ph·ª• huynh'); } }]}
                    >
                        {(fields, { add, remove }) => (
                            <>
                                <Title level={5} style={{ marginTop: 0 }}>Th√¥ng tin ph·ª• huynh</Title>
                                {fields.map((field, idx) => (
                                    <Card key={field.key} style={{ marginBottom: 16, borderRadius: 8, background: '#fafafa', position: 'relative' }}>
                                        {fields.length > 1 && (
                                            <Button
                                                type="text"
                                                danger
                                                icon={<MinusCircleOutlined />}
                                                onClick={() => remove(field.name)}
                                                style={{ position: 'absolute', top: 8, right: 8 }}
                                            >
                                                X√≥a ph·ª• huynh
                                            </Button>
                                        )}
                                        <Form.Item
                                            name={[field.name, 'first_name']}
                                            label="H·ªç"
                                            rules={[{ required: true, message: 'Nh·∫≠p h·ªç' }, { min: 2, max: 50, message: '2-50 k√Ω t·ª±' }, { pattern: vietnameseNameRegex, message: 'Ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát' }]}
                                            extra="2-50 k√Ω t·ª±, ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát."
                                        >
                                            <Input placeholder="Nh·∫≠p h·ªç" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'last_name']}
                                            label="T√™n"
                                            rules={[{ required: true, message: 'Nh·∫≠p t√™n' }, { min: 2, max: 50, message: '2-50 k√Ω t·ª±' }, { pattern: vietnameseNameRegex, message: 'Ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát' }]}
                                            extra="2-50 k√Ω t·ª±, ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát."
                                        >
                                            <Input placeholder="Nh·∫≠p t√™n" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'dob']}
                                            label="Ng√†y sinh"
                                            rules={[{
                                                validator: (_, value) => {
                                                    if (!value) return Promise.reject('Ch·ªçn ng√†y sinh');
                                                    const age = dayjs().diff(dayjs(value), 'year');
                                                    if (age < 18 || age > 100) return Promise.reject('Tu·ªïi ph·ª• huynh ph·∫£i t·ª´ 18-100');
                                                    return Promise.resolve();
                                                }
                                            }]}
                                            extra="Tu·ªïi t·ª´ 18-100."
                                        >
                                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'gender']}
                                            label="Gi·ªõi t√≠nh"
                                            rules={[{ required: true, message: 'Ch·ªçn gi·ªõi t√≠nh' }]}
                                            extra="B·∫Øt bu·ªôc."
                                        >
                                            <Select options={genderOptions} placeholder="Ch·ªçn gi·ªõi t√≠nh" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'address']}
                                            label="ƒê·ªãa ch·ªâ"
                                            rules={[{ required: true, message: 'Nh·∫≠p ƒë·ªãa ch·ªâ' }, { min: 10, max: 200, message: '10-200 k√Ω t·ª±' }]}
                                            extra="10-200 k√Ω t·ª±."
                                        >
                                            <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'phone']}
                                            label="S·ªë ƒëi·ªán tho·∫°i"
                                            rules={[{ pattern: /^(03|05|07|08|09)\d{8}$/, message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i 10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 03, 05, 07, 08, 09' }]}
                                            extra="10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 03, 05, 07, 08, 09."
                                        >
                                            <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'job_title']}
                                            label="Ngh·ªÅ nghi·ªáp"
                                            rules={[{ max: 255, message: 'T·ªëi ƒëa 255 k√Ω t·ª±' }]}
                                            extra="T√πy ch·ªçn. T·ªëi ƒëa 255 k√Ω t·ª±."
                                        >
                                            <Input placeholder="Ngh·ªÅ nghi·ªáp (t√πy ch·ªçn)" />
                                        </Form.Item>
                                        <Form.Item name={[field.name, 'roleid']} initialValue={3} hidden>
                                            <Input type="hidden" />
                                        </Form.Item>
                                    </Card>
                                ))}
                                <Button
                                    type="dashed"
                                    onClick={() => add()}
                                    icon={<PlusOutlined />}
                                    disabled={fields.length >= 2}
                                    style={{ width: '100%', marginBottom: 24 }}
                                >
                                    Th√™m ph·ª• huynh
                                </Button>
                            </>
                        )}
                    </Form.List>
                    <Divider />
                    <Form.List name="students" initialValue={[{}]} rules={[{ validator: async (_, students) => { if (!students || students.length < 1) throw new Error('√çt nh·∫•t 1 h·ªçc sinh'); if (students.length > 5) throw new Error('T·ªëi ƒëa 5 h·ªçc sinh'); } }]}
                    >
                        {(fields, { add, remove }) => (
                            <>
                                <Title level={5}>Th√¥ng tin h·ªçc sinh</Title>
                                {fields.map((field, idx) => (
                                    <Card key={field.key} style={{ marginBottom: 16, borderRadius: 8, background: '#f6f8fa', position: 'relative' }}>
                                        {fields.length > 1 && (
                                            <Button
                                                type="text"
                                                danger
                                                icon={<MinusCircleOutlined />}
                                                onClick={() => remove(field.name)}
                                                style={{ position: 'absolute', top: 8, right: 8 }}
                                            >
                                                X√≥a h·ªçc sinh
                                            </Button>
                                        )}
                                        <Form.Item
                                            name={[field.name, 'first_name']}
                                            label="H·ªç"
                                            rules={[{ required: true, message: 'Nh·∫≠p h·ªç' }, { min: 2, max: 50, message: '2-50 k√Ω t·ª±' }, { pattern: vietnameseNameRegex, message: 'Ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát' }]}
                                            extra="2-50 k√Ω t·ª±, ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát."
                                        >
                                            <Input placeholder="Nh·∫≠p h·ªç" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'last_name']}
                                            label="T√™n"
                                            rules={[{ required: true, message: 'Nh·∫≠p t√™n' }, { min: 2, max: 50, message: '2-50 k√Ω t·ª±' }, { pattern: vietnameseNameRegex, message: 'Ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát' }]}
                                            extra="2-50 k√Ω t·ª±, ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát."
                                        >
                                            <Input placeholder="Nh·∫≠p t√™n" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'dob']}
                                            label="Ng√†y sinh"
                                            rules={[{
                                                validator: (_, value) => {
                                                    if (!value) return Promise.reject('Ch·ªçn ng√†y sinh');
                                                    const age = dayjs().diff(dayjs(value), 'year');
                                                    if (age < 6 || age > 12) return Promise.reject('Tu·ªïi h·ªçc sinh ph·∫£i t·ª´ 6-12');
                                                    return Promise.resolve();
                                                }
                                            }]}
                                            extra="T·ª´ 6 ƒë·∫øn 12 tu·ªïi."
                                        >
                                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'birth_place']}
                                            label="N∆°i sinh"
                                            extra="Ch·ªçn n∆°i sinh t·ª´ danh s√°ch."
                                        >
                                            <Select placeholder="Ch·ªçn n∆°i sinh">
                                                {birthPlaceOptions.map((place) => (
                                                    <Option key={place} value={place}>{place}</Option>
                                                ))}
                                            </Select>
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'gender']}
                                            label="Gi·ªõi t√≠nh"
                                            rules={[{ required: true, message: 'Ch·ªçn gi·ªõi t√≠nh' }]}
                                            extra="B·∫Øt bu·ªôc."
                                        >
                                            <Select options={genderOptions} placeholder="Ch·ªçn gi·ªõi t√≠nh" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'citizenship']}
                                            label="Qu·ªëc t·ªãch"
                                            initialValue="Vi·ªát Nam"
                                            extra="M·∫∑c ƒë·ªãnh l√† Vi·ªát Nam."
                                        >
                                            <Input placeholder="Qu·ªëc t·ªãch" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'address']}
                                            label="ƒê·ªãa ch·ªâ nh√†"
                                            extra="T√πy ch·ªçn."
                                        >
                                            <Input placeholder="ƒê·ªãa ch·ªâ nh√†" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'class_name']}
                                            label="L·ªõp"
                                            rules={[{ required: true, message: 'Nh·∫≠p l·ªõp' }]}
                                            extra="B·∫Øt bu·ªôc."
                                        >
                                            <Input placeholder="L·ªõp" />
                                        </Form.Item>
                                        <Form.Item
                                            name={[field.name, 'is_disabled']}
                                            valuePropName="checked"
                                            extra="T√πy ch·ªçn."
                                        >
                                            <Checkbox>Khuy·∫øt t·∫≠t?</Checkbox>
                                        </Form.Item>
                                        <Form.Item name={[field.name, 'father_id']} hidden><Input type="hidden" /></Form.Item>
                                        <Form.Item name={[field.name, 'mother_id']} hidden><Input type="hidden" /></Form.Item>
                                    </Card>
                                ))}
                                <Button
                                    type="dashed"
                                    onClick={() => add()}
                                    icon={<PlusOutlined />}
                                    disabled={fields.length >= 5}
                                    style={{ width: '100%', marginBottom: 24 }}
                                >
                                    Th√™m h·ªçc sinh
                                </Button>
                            </>
                        )}
                    </Form.List>
                    <Divider />
                    <Form.Item>
                        <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
                            <Button onClick={() => {
                                setShowAddModal(false);
                                form.resetFields();
                            }}>
                                H·ªßy
                            </Button>
                            <Button type="primary" htmlType="submit">
                                Th√™m
                            </Button>
                        </Space>
                    </Form.Item>
                </Form>
            </Modal>
            <Modal
                title="S·ª≠a th√¥ng tin h·ªçc sinh"
                open={showEditModal}
                onCancel={() => {
                    setShowEditModal(false);
                    setEditingStudent(null);
                    editForm.resetFields();
                }}
                footer={null}
            >
                <Form
                    form={editForm}
                    layout="vertical"
                    onFinish={handleEditSave}
                    initialValues={editingStudent}
                >
                    <Form.Item
                        name="name"
                        label="T√™n"
                        rules={[{ required: true, message: 'Nh·∫≠p t√™n' }, { min: 2, max: 50, message: '2-50 k√Ω t·ª±' }, { pattern: vietnameseNameRegex, message: 'Ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát' }]}
                        extra="2-50 k√Ω t·ª±, ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát."
                    >
                        <Input placeholder="Nh·∫≠p t√™n" />
                    </Form.Item>
                    <Form.Item
                        name="email"
                        label="Email"
                        rules={[{ required: true, message: 'Nh·∫≠p email' }, { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá' }]}
                    >
                        <Input placeholder="Nh·∫≠p email" />
                    </Form.Item>
                    <Form.Item
                        name="enrollmentDate"
                        label="Ng√†y nh·∫≠p h·ªçc"
                        rules={[{ required: true, message: 'Nh·∫≠p ng√†y nh·∫≠p h·ªçc' }]}
                    >
                        <Input placeholder="YYYY-MM-DD" />
                    </Form.Item>
                    <Form.Item>
                        <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
                            <Button onClick={() => {
                                setShowEditModal(false);
                                setEditingStudent(null);
                                editForm.resetFields();
                            }}>
                                H·ªßy
                            </Button>
                            <Button type="primary" htmlType="submit">
                                L∆∞u
                            </Button>
                        </Space>
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    );
};

export default StudentsSection; 