import React from 'react';
import { Form, Input, Select, DatePicker } from 'antd';
import dayjs from 'dayjs';
import { 
  validateVietnameseName, 
  validateVietnamesePhone, 
  validateEmail, 
  validateAddress
} from '../../utils/formValidation';
import { getMinAgeForRole, getMaxAgeForRole, ROLE_LABELS } from '../../constants/userRoles';

const UserForm = ({ 
  form, 
  selectedRole, 
  modalMode = 'add',
  existingUsers = [] 
}) => {
  
  // Check for duplicate values
  const checkDuplicate = (value, field, currentUserId = null) => {
    return existingUsers.some(user => 
      user[field] === value && user.id !== currentUserId
    );
  };

  // Age validation based on role
  const validateAge = (_, value) => {
    if (!value) return Promise.resolve();

    const today = new Date();
    const birthDate = new Date(value);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();

    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }

    if (birthDate > today) {
      return Promise.reject(new Error('Ng√†y sinh kh√¥ng th·ªÉ trong t∆∞∆°ng lai!'));
    }

    const minAge = getMinAgeForRole(selectedRole);
    const maxAge = getMaxAgeForRole(selectedRole);

    if (age < minAge || age > maxAge) {
      return Promise.reject(
        new Error(`Tu·ªïi ph·∫£i t·ª´ ${minAge} ƒë·∫øn ${maxAge} cho vai tr√≤ n√†y!`)
      );
    }

    return Promise.resolve();
  };

  // Phone validation with duplicate check
  const validatePhoneWithDuplicate = (_, value) => {
    const phoneValidation = validateVietnamesePhone(value);
    if (!phoneValidation.isValid) {
      return Promise.reject(new Error(phoneValidation.message));
    }

    if (modalMode === 'add' && checkDuplicate(value, 'phone')) {
      return Promise.reject(new Error('S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!'));
    }

    return Promise.resolve();
  };

  // Email validation with duplicate check
  const validateEmailWithDuplicate = (_, value) => {
    const emailValidation = validateEmail(value);
    if (!emailValidation.isValid) {
      return Promise.reject(new Error(emailValidation.message));
    }

    if (modalMode === 'add' && checkDuplicate(value, 'email')) {
      return Promise.reject(new Error('Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!'));
    }

    return Promise.resolve();
  };

  // Name validation
  const validateName = (_, value) => {
    const validation = validateVietnameseName(value);
    if (!validation.isValid) {
      return Promise.reject(new Error(validation.message));
    }
    return Promise.resolve();
  };

  // Address validation
  const validateAddressField = (_, value) => {
    const validation = validateAddress(value);
    if (!validation.isValid) {
      return Promise.reject(new Error(validation.message));
    }
    return Promise.resolve();
  };

  // Only allow numbers for phone input
  const handlePhoneKeyPress = (e) => {
    if (!/[0-9]/.test(e.key)) {
      e.preventDefault();
    }
  };

  return (
    <>
      {/* Information Guidelines */}
      <div
        style={{
          marginBottom: '24px',
          padding: '16px',
          backgroundColor: '#f6ffed',
          border: '1px solid #b7eb8f',
          borderRadius: '8px'
        }}
      >
        <h4 style={{ margin: '0 0 12px 0', color: '#389e0d' }}>
          üìã Th√¥ng tin cho vai tr√≤: {ROLE_LABELS[selectedRole]}
        </h4>
        <div style={{ fontSize: '13px', color: '#52c41a' }}>
          <div style={{ marginBottom: '8px' }}>
            <strong>Th√¥ng tin b·∫Øt bu·ªôc:</strong>
            <ul style={{ margin: '4px 0', paddingLeft: '20px' }}>
              <li>H·ªç v√† t√™n: 2-50 k√Ω t·ª±, ch·ªâ ch·ªØ c√°i ti·∫øng Vi·ªát</li>
              <li>S·ªë ƒëi·ªán tho·∫°i: 10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 03, 05, 07, 08, 09 (kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p)</li>
              <li>Email: ƒê·ªãa ch·ªâ email h·ª£p l·ªá (kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p)</li>
              <li>T√™n ƒëƒÉng nh·∫≠p: 3-30 k√Ω t·ª±, b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i (kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p)</li>
              <li>M·∫≠t kh·∫©u: S·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o (m·∫≠t kh·∫©u t·∫°m th·ªùi)</li>
              <li>Ng√†y sinh: Tu·ªïi t·ª´ {getMinAgeForRole(selectedRole)}-{getMaxAgeForRole(selectedRole)}</li>
              <li>Gi·ªõi t√≠nh: B·∫Øt bu·ªôc ch·ªçn</li>
              <li>ƒê·ªãa ch·ªâ: 10-200 k√Ω t·ª±</li>
            </ul>
            <div style={{ marginTop: '8px', color: '#faad14', fontSize: '12px' }}>
              <strong>L∆∞u √Ω:</strong> Ng∆∞·ªùi d√πng s·∫Ω ƒë∆∞·ª£c y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u v√† x√°c th·ª±c email khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu.
            </div>
          </div>
        </div>
      </div>

      <Form
        form={form}
        layout="vertical"
        initialValues={{
          role: selectedRole,
          email: '',
          jobTitle: '',
          firstName: '',
          lastName: '',
          phone: '',
          address: '',
          gender: undefined,
          dob: null,
          status: 'ACTIVE'
        }}
      >
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
          {/* Last Name */}
          <Form.Item
            label="H·ªç"
            name="lastName"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç!' },
              { validator: validateName }
            ]}
          >
            <Input placeholder="Nh·∫≠p h·ªç" autoComplete="off" />
          </Form.Item>

          {/* First Name */}
          <Form.Item
            label="T√™n"
            name="firstName"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n!' },
              { validator: validateName }
            ]}
          >
            <Input placeholder="Nh·∫≠p t√™n" autoComplete="off" />
          </Form.Item>

          {/* Phone */}
          <Form.Item
            label="S·ªë ƒëi·ªán tho·∫°i"
            name="phone"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!' },
              { validator: validatePhoneWithDuplicate }
            ]}
          >
            <Input
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (VD: 0901234567)"
              maxLength={10}
              autoComplete="off"
              onKeyPress={handlePhoneKeyPress}
            />
          </Form.Item>

          {/* Date of Birth */}
          <Form.Item
            label="Ng√†y sinh"
            name="dob"
            rules={[
              { required: true, message: 'Vui l√≤ng ch·ªçn ng√†y sinh!' },
              { validator: validateAge }
            ]}
          >
            <DatePicker
              style={{ width: '100%' }}
              placeholder="Ch·ªçn ng√†y sinh"
              format="DD/MM/YYYY"
              disabledDate={(current) => current && current > dayjs().endOf('day')}
            />
          </Form.Item>

          {/* Gender */}
          <Form.Item
            label="Gi·ªõi t√≠nh"
            name="gender"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn gi·ªõi t√≠nh!' }]}
          >
            <Select placeholder="Ch·ªçn gi·ªõi t√≠nh">
              <Select.Option value="M">Nam</Select.Option>
              <Select.Option value="F">N·ªØ</Select.Option>
            </Select>
          </Form.Item>

          {/* Email */}
          <Form.Item
            label="Email"
            name="email"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p email!' },
              { validator: validateEmailWithDuplicate }
            ]}
          >
            <Input 
              placeholder="Nh·∫≠p email" 
              autoComplete="off" 
              type="email"
            />
          </Form.Item>

          {/* Job Title (if needed) */}
          <Form.Item
            label="Ch·ª©c v·ª•"
            name="jobTitle"
          >
            <Input placeholder="Nh·∫≠p ch·ª©c v·ª• (t√πy ch·ªçn)" autoComplete="off" />
          </Form.Item>

          {/* Hidden role field */}
          <Form.Item name="role" style={{ display: 'none' }}>
            <Input />
          </Form.Item>
        </div>

        {/* Address */}
        <Form.Item
          label="ƒê·ªãa ch·ªâ"
          name="address"
          rules={[
            { required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!' },
            { validator: validateAddressField }
          ]}
        >
          <Input.TextArea
            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß (VD: 123 ƒê∆∞·ªùng ABC, Ph∆∞·ªùng XYZ, Qu·∫≠n 1, TP.HCM)"
            rows={3}
            showCount
            maxLength={200}
          />
        </Form.Item>
      </Form>
    </>
  );
};

export default UserForm;
